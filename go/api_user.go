/*
 * api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

// A UserApiController binds http requests to an api service and writes the service results to the http response
type UserApiController struct {
	service UserApiServicer
}

// NewUserApiController creates a default api controller
func NewUserApiController(s UserApiServicer) Router {
	return &UserApiController{service: s}
}

// Routes returns all of the api route for the UserApiController
func (c *UserApiController) Routes() Routes {
	return Routes{
		{
			"GetUserByUserId",
			strings.ToUpper("Get"),
			"/user/{userId}",
			c.GetUserByUserId,
		},
		{
			"GetUserByUid",
			strings.ToUpper("Get"),
			"/user/uid/{uid}",
			c.GetUserByUid,
		},
		{
			"GetUsers",
			strings.ToUpper("Get"),
			"/users",
			c.GetUsers,
		},
		{
			"PatchUsersUserId",
			strings.ToUpper("Patch"),
			"/user/{userId}",
			c.PatchUsersUserId,
		},
		{
			"PostUser",
			strings.ToUpper("Post"),
			"/user",
			c.PostUser,
		},
	}
}

// GetUserByUserId - Get User Info by User ID
func (c *UserApiController) GetUserByUserId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId, _ := strconv.Atoi(params["userId"])
	result, err := c.service.GetUserByUserId(userId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetUserByUid - Get User Info by User UID
func (c *UserApiController) GetUserByUid(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uid := params["uid"]
	result, err := c.service.GetUserByUid(uid)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetUsers - Get all users
func (c *UserApiController) GetUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUsers()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PatchUsersUserId - Update User Information
func (c *UserApiController) PatchUsersUserId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId, _ := strconv.Atoi(params["userId"])
	inlineObject := &InlineObject{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.PatchUsersUserId(userId, *inlineObject)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PostUser - Create New User
func (c *UserApiController) PostUser(w http.ResponseWriter, r *http.Request) {
	user := &User{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.PostUser(*user)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	fmt.Println(result)

	EncodeJSONResponse(result, nil, w)
}
