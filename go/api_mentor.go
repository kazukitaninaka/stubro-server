/*
 * api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A MentorApiController binds http requests to an api service and writes the service results to the http response
type MentorApiController struct {
	service MentorApiServicer
}

// NewMentorApiController creates a default api controller
func NewMentorApiController(s MentorApiServicer) Router {
	return &MentorApiController{service: s}
}

// Routes returns all of the api route for the MentorApiController
func (c *MentorApiController) Routes() Routes {
	return Routes{
		{
			"GetMentorByMentorId",
			strings.ToUpper("Get"),
			"/mentor/{mentorId}",
			c.GetMentorByMentorId,
		},
		{
			"GetMentors",
			strings.ToUpper("Get"),
			"/mentors",
			c.GetMentors,
		},
		{
			"PatchMentor",
			strings.ToUpper("Patch"),
			"/mentor/{mentorId}",
			c.PatchMentor,
		},
		{
			"PostMentor",
			strings.ToUpper("Post"),
			"/mentor",
			c.PostMentor,
		},
	}
}

// GetMentorByMentorId - Get a mentor
func (c *MentorApiController) GetMentorByMentorId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mentorId := params["mentorId"]
	result, err := c.service.GetMentorByMentorId(mentorId)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetMentors - Get all mentors
func (c *MentorApiController) GetMentors(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetMentors()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PatchMentorMentorId - Update mentor's information
func (c *MentorApiController) PatchMentor(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mentorId := params["mentorId"]
	inlineObject2 := &InlineObject2{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject2); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.PatchMentor(mentorId, *inlineObject2)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PostMentor - Add a mentor
func (c *MentorApiController) PostMentor(w http.ResponseWriter, r *http.Request) {
	mentor := &Mentor{}
	if err := json.NewDecoder(r.Body).Decode(&mentor); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.PostMentor(*mentor)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
