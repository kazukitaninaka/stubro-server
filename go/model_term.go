/*
 * openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import "gorm.io/gorm"

type Term struct {
	*gorm.Model
	ID   uint   `json:"id" gorm:"primarykey"`
	Name string `json:"name" gorm:"unique"`
}

// AssertTermRequired checks if the required fields are not zero-ed
func AssertTermRequired(obj Term) error {
	elements := map[string]interface{}{
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTermRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Term (e.g. [][]Term), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTermRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTerm, ok := obj.(Term)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTermRequired(aTerm)
	})
}
